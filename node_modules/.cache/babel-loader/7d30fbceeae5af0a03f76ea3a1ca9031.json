{"ast":null,"code":"import { call, put, all, takeLatest, select, throttle } from 'redux-saga/effects';\nimport { ActionType } from '../store/action-types';\nimport { Operation } from '../api/operations';\nimport { ActionCreator } from '../store/actions';\nimport { history } from '../history.js';\n\nfunction* fetchUsersSaga({\n  url\n}) {\n  console.log({\n    url\n  });\n  const data = yield fetch(`${url}`).then(response => response.json());\n  yield put(ActionCreator.setData(data, true));\n  history.push('/table');\n}\n\nexport default function* sagaWatcher() {\n  yield all([takeLatest(ActionType.GET_DATA, fetchUsersSaga)]);\n}","map":{"version":3,"sources":["C:/Users/corbie/Desktop/testFuture/src/sagas/sagas.js"],"names":["call","put","all","takeLatest","select","throttle","ActionType","Operation","ActionCreator","history","fetchUsersSaga","url","console","log","data","fetch","then","response","json","setData","push","sagaWatcher","GET_DATA"],"mappings":"AAAA,SAASA,IAAT,EAAeC,GAAf,EAAoBC,GAApB,EAAyBC,UAAzB,EAAqCC,MAArC,EAA6CC,QAA7C,QAA6D,oBAA7D;AACA,SAAQC,UAAR,QAAyB,uBAAzB;AACA,SAAQC,SAAR,QAAwB,mBAAxB;AACA,SAAQC,aAAR,QAA4B,kBAA5B;AACA,SAAQC,OAAR,QAAsB,eAAtB;;AAIA,UAAUC,cAAV,CAAyB;AAACC,EAAAA;AAAD,CAAzB,EAAgC;AAC5BC,EAAAA,OAAO,CAACC,GAAR,CAAY;AAACF,IAAAA;AAAD,GAAZ;AACA,QAAMG,IAAI,GAAG,MAAMC,KAAK,CAAE,GAAEJ,GAAI,EAAR,CAAL,CAClBK,IADkB,CACbC,QAAQ,IAAIA,QAAQ,CAACC,IAAT,EADC,CAAnB;AAEA,QAAMjB,GAAG,CAACO,aAAa,CAACW,OAAd,CAAsBL,IAAtB,EAA4B,IAA5B,CAAD,CAAT;AACAL,EAAAA,OAAO,CAACW,IAAR,CAAa,QAAb;AACH;;AAGD,eAAe,UAAUC,WAAV,GAAwB;AACrC,QAAMnB,GAAG,CAAC,CACRC,UAAU,CAACG,UAAU,CAACgB,QAAZ,EAAsBZ,cAAtB,CADF,CAAD,CAAT;AAGD","sourcesContent":["import { call, put, all, takeLatest, select, throttle } from 'redux-saga/effects';\r\nimport {ActionType} from '../store/action-types';\r\nimport {Operation} from '../api/operations';\r\nimport {ActionCreator} from '../store/actions';\r\nimport {history} from '../history.js'\r\n\r\n\r\n\r\nfunction* fetchUsersSaga({url}) {\r\n    console.log({url})\r\n    const data = yield fetch(`${url}`)\r\n    .then(response => response.json());\r\n    yield put(ActionCreator.setData(data, true));\r\n    history.push('/table')\r\n}\r\n\r\n\r\nexport default function* sagaWatcher() {\r\n  yield all([\r\n    takeLatest(ActionType.GET_DATA, fetchUsersSaga)\r\n  ]);\r\n}\r\n"]},"metadata":{},"sourceType":"module"}